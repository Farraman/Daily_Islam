import os
import asyncio
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Update, Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests

# ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7601592392:AAHcw0VODhZoTm899c4IAG-x1ZVtBE4--Cg'
CHANNEL_ID = -1002548380025
ADMIN_ID = 1812311983
WEBHOOK_HOST = 'https://daily-islam.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
DEFAULT_POST_TIME = "09:00"
TIME_FILE = "post_time.txt"

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
waiting_for_time_input = set()

# ‚úÖ –¢–µ–º—ã
daily_topics = [
    "–ü–æ–¥–µ–ª–∏—Å—å –¶–∏—Ç–∞—Ç–æ–π –∏–∑ –ö–æ—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–¥–µ–∂–¥—ã! ...",
    "–ü–æ–¥–µ–ª–∏—Å—å –∞—è—Ç–æ–º –∏–∑ –ö–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±–æ–≤—å –ê–ª–ª–∞—Ö–∞ ...",
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
]

def get_daily_prompt():
    index = datetime.now(ZoneInfo("Asia/Almaty")).timetuple().tm_yday % len(daily_topics)
    return daily_topics[index]

def load_post_time():
    if os.path.exists(TIME_FILE):
        with open(TIME_FILE, "r") as f:
            return f.read().strip()
    return DEFAULT_POST_TIME

def save_post_time(new_time):
    with open(TIME_FILE, "w") as f:
        f.write(new_time)

def was_posted_today():
    path = "last_post_date.txt"
    today_str = datetime.now(ZoneInfo("Asia/Almaty")).strftime("%Y-%m-%d")
    if os.path.exists(path):
        with open(path, "r") as f:
            return f.read().strip() == today_str
    return False

def update_last_post_date():
    with open("last_post_date.txt", "w") as f:
        f.write(datetime.now(ZoneInfo("Asia/Almaty")).strftime("%Y-%m-%d"))

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
async def send_daily_post():
    if was_posted_today():
        logging.info("‚úÖ –ü–æ—Å—Ç —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è.")
        return

    prompt = get_daily_prompt()
    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer io-v2-..."
    }
    data = {
        "model": "deepseek-ai/DeepSeek-R1",
        "messages": [
            {"role": "system", "content": "–°–¥–µ–ª–∞–π –∏—Å–ª–∞–º—Å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É –¥–Ω—è"},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        text = result['choices'][0]['message']['content']
        bot_text = text.split('</think>\n\n')[1] if '</think>\n\n' in text else text
        await bot.send_message(chat_id=CHANNEL_ID, text=bot_text)
        update_last_post_date()
        logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

# ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def daily_post():
    while True:
        now = datetime.now(ZoneInfo("Asia/Almaty"))
        hour, minute = map(int, load_post_time().split(":"))
        target = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if now > target:
            target += timedelta(days=1)
        wait = (target - now).total_seconds()
        logging.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ {target} (—á–µ—Ä–µ–∑ {wait / 3600:.1f} —á)")
        await asyncio.sleep(wait)
        await send_daily_post()

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã
@dp.message(CommandStart())
async def start_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∏—Å–ª–∞–º—Å–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å", callback_data="post_now")
    kb.button(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")
    kb.adjust(1)

    await message.answer("üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "post_now")
async def cb_post_now(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    await send_daily_post()
    await callback.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@dp.callback_query(F.data == "change_time")
async def cb_change_time(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    waiting_for_time_input.add(callback.from_user.id)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
    await callback.answer()

@dp.message()
async def handle_text(message: Message):
    if message.from_user.id in waiting_for_time_input:
        try:
            datetime.strptime(message.text, "%H:%M")
            save_post_time(message.text)
            waiting_for_time_input.remove(message.from_user.id)
            await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45).")

# ‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(daily_post())
    logging.info("üåê –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def on_shutdown(app):
    await bot.session.close()
    logging.info("‚ùå –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return web.Response()
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return web.Response(status=500)

async def handle_index(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")

# ‚úÖ –ó–∞–ø—É—Å–∫
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.router.add_get("/", handle_index)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
