import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, Update
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import os
import requests

# üîê –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = '7601592392:AAHcw0VODhZoTm899c4IAG-x1ZVtBE4--Cg'
CHANNEL_ID = '@Daily_Reminder_Islam'
ADMIN_ID = 1812311983
WEBHOOK_HOST = 'https://daily-islam.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# üïò –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
TIME_FILE = "post_time.txt"
DEFAULT_POST_TIME = "09:00"

# üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîß –û–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üïå –¢–µ–º—ã –ø–æ—Å—Ç–æ–≤ –ø–æ –¥–Ω—è–º
daily_topics = [
    "–ü–æ–¥–µ–ª–∏—Å—å –¶–∏—Ç–∞—Ç–æ–π –∏–∑ –ö–æ—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–¥–µ–∂–¥—ã! (–Ω–µ –±–æ–ª—å—à–µ 50 —Å–ª–æ–≤,–¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –∏ (–≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞—Ö –ø–∏—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ü–∏—Ç–∞—Ç—ã –≤–≤–∏–¥–µ —Å—É—Ä—ã –∏ –∞—è—Ç–∞) –Ω–æ –Ω–µ –ø–∏—à–∏ –∫–æ–ª-–≤–æ —Å–ª–æ–≤",
    "–ü–æ–¥–µ–ª–∏—Å—å –∞—è—Ç–æ–º –∏–∑ –ö–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±–æ–≤—å –ê–ª–ª–∞—Ö–∞ –∫ –°–≤–æ–∏–º —Ä–∞–±–∞–º –∏ –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ —Å–º—ã—Å–ª...",
    "–†–∞—Å—Å–∫–∞–∂–∏ —Ö–∞–¥–∏—Å –ü—Ä–æ—Ä–æ–∫–∞ Ô∑∫ –æ –ª—é–±–≤–∏ –ê–ª–ª–∞—Ö–∞ –∫ –≤–µ—Ä—É—é—â–∏–º.(–Ω–µ –±–æ–ª—å—à–µ 50 —Å–ª–æ–≤)",
    "–°–¥–µ–ª–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ —Ç–æ–º, –∫–∞–∫ –ê–ª–ª–∞—Ö –ø—Ä–æ—è–≤–ª—è–µ—Ç –°–≤–æ—é –ª—é–±–æ–≤—å –≤ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö...",
    "–ü–æ–¥–µ–ª–∏—Å—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑ –∏—Å–ª–∞–º—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏...",
    "–û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –ª—é–±–æ–≤—å –ê–ª–ª–∞—Ö–∞ –≤—ã—à–µ –ª—é–±–≤–∏ –ª—é–±–æ–≥–æ —Ç–≤–æ—Ä–µ–Ω–∏—è...",
    "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –¥–µ–ª–∞—é—Ç –µ–≥–æ –ª—é–±–∏–º—ã–º –¥–ª—è –ê–ª–ª–∞—Ö–∞...",
    "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ –ê–ª–ª–∞—Ö –ª—é–±–∏—Ç –ø—Ä–æ—â–∞—é—â–∏—Ö –∏ –∫–∞—é—â–∏—Ö—Å—è..."
]

def load_post_time():
    if os.path.exists(TIME_FILE):
        with open(TIME_FILE, "r") as f:
            return f.read().strip()
    return DEFAULT_POST_TIME

def save_post_time(new_time):
    with open(TIME_FILE, "w") as f:
        f.write(new_time)

def get_daily_prompt():
    index = datetime.now(ZoneInfo("Asia/Almaty")).timetuple().tm_yday % len(daily_topics)
    return daily_topics[index]

def was_posted_today():
    path = "last_post_date.txt"
    today_str = datetime.now(ZoneInfo("Asia/Almaty")).strftime("%Y-%m-%d")
    if os.path.exists(path):
        with open(path, "r") as f:
            return f.read().strip() == today_str
    return False

def update_last_post_date():
    with open("last_post_date.txt", "w") as f:
        f.write(datetime.now(ZoneInfo("Asia/Almaty")).strftime("%Y-%m-%d"))

async def send_daily_post():
    if was_posted_today():
        logging.info("‚úÖ –ü–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è.")
        return

    try:
        prompt = get_daily_prompt()
        url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjQzYzg3NGVlLWY1NGItNGU2Zi04NTM5LWEwZjllZmVkMmVhOSIsImV4cCI6NDkwMDQ5NDgwNX0.Ydko0GRPqtQJGSd2x6qH7BnmK9EKAQGoY9W_AxZUXzDjvtdw0JyfMbJw_OvU-IA3EAVkHH0lbDrQ4iocF3lQEg"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á!
        }
        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": [
                {"role": "system", "content": "–°–¥–µ–ª–∞–π –∏—Å–ª–∞–º—Å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É –¥–Ω—è"},
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        text = result['choices'][0]['message']['content']
        bot_text = text.split('</think>\n\n')[1] if '</think>\n\n' in text else text

        await bot.send_message(chat_id=CHANNEL_ID, text=bot_text, parse_mode="Markdown")
        update_last_post_date()
        logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")

# üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def daily_post():
    while True:
        now = datetime.now(ZoneInfo("Asia/Almaty"))
        post_time = load_post_time()
        hour, minute = map(int, post_time.split(":"))
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if now > target_time:
            target_time += timedelta(days=1)

        wait_seconds = (target_time - now).total_seconds()
        logging.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ {post_time} (—á–µ—Ä–µ–∑ {wait_seconds / 3600:.1f} —á–∞—Å–æ–≤)")
        await asyncio.sleep(wait_seconds)
        await send_daily_post()

# üîò –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∏—Å–ª–∞–º—Å–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")

@dp.message(Command("set_time"))
async def cmd_set_time(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    args = message.text.split()
    if len(args) != 2 or ":" not in args[1]:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_time HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_time 09:00)")
        return

    try:
        datetime.strptime(args[1], "%H:%M")
        save_post_time(args[1])
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {args[1]}!")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

@dp.message(Command("post_now"))
async def cmd_post_now(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await send_daily_post()
    await message.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!")

@dp.message()
async def handle_message(message: Message):
    await message.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /set_time –∏–ª–∏ /post_now.")

# üåê Webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def on_webhook(request):
    json_str = await request.json()
    update = Update(**json_str)
    await dp.feed_update(bot, update)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è aiogram 3
    return web.Response(status=200)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await bot.set_webhook(WEBHOOK_URL)
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, on_webhook)
    asyncio.create_task(daily_post())
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logging.info("‚úÖ Webhook –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã.")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
